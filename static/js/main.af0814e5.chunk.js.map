{"version":3,"sources":["components/GameOverScreen.js","App.js","serviceWorker.js","index.js"],"names":["GameOverScreen","handleClicked","id","className","onClick","App","useState","snakeDirection","setSnakeDirection","snakePositions","setSnakePositions","isGameOver","setIsGameOver","getRandomCube","applePositions","setApplePositions","isSoundActive","setSoundActive","isEnterClicked","updatedEnterClicked","useEffect","interval","setInterval","isSnakeHeadPositionValid","getSnakeHeadNewPosition","currentSP","shift","push","updateSnakeBodyPosition","isPositionEqualToApplePosition","increaseSnakeBody","updateApplePosition","playBurpSound","gameOver","clearInterval","document","addEventListener","handleKeyPress","window","removeEventListener","nextCube","length","cubeToCheck","isPositionEqualToSnakePosition","includes","snakeHeadPositionToCheck","isSnakeHeadTouchFrame","NUMBER_OF_LINES","Math","floor","isPositionEqualToFrameOfBoard","applePositionToCheck","newRandomCube","e","console","log","key","startNewGame","setCubeClass","i","j","classToReturn","unitsAndTens","getRndInteger","min","max","random","playSadSound","setTimeout","Audio","play","catch","error","Fragment","Array","keys","map","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.af0814e5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction GameOverScreen({handleClicked}) {\r\n    return (\r\n        <div id={\"game-over-screen\"}\r\n             className={\"show\"}>\r\n            <section>\r\n                <h2>Ohh...</h2>\r\n                <h1>You Failed!</h1>\r\n            </section>\r\n            <h3>Want to start over?</h3>\r\n            <button id={`BTN-start-new-game`}\r\n                    onClick={handleClicked}>\r\n                Start Again\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameOverScreen;","import React, {useState, useEffect} from 'react';\r\nimport './scss/app.scss';\r\n\r\nimport GameOverScreen from \"./components/GameOverScreen\";\r\n\r\nfunction App() {\r\n  const NUMBER_OF_LINES = 25;\r\n  const [snakeDirection, setSnakeDirection] = useState(\"down\");\r\n  const [snakePositions, setSnakePositions] = useState([712,812,912,1012]);\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [applePositions, setApplePositions] = useState(getRandomCube());\r\n  // const [treesObjectPositions, setTreesObjectPositions] = useState([]);\r\n  const [isSoundActive, setSoundActive] = useState(false);\r\n  const [isEnterClicked, updatedEnterClicked] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (isSnakeHeadPositionValid(getSnakeHeadNewPosition())) {\r\n        updateSnakeBodyPosition();\r\n        if (isPositionEqualToApplePosition(getSnakeHeadNewPosition())) {\r\n          increaseSnakeBody();\r\n          updateApplePosition();\r\n          if (isSoundActive) {\r\n            playBurpSound();\r\n          }\r\n        }\r\n      } else {\r\n        gameOver();\r\n        clearInterval(interval);\r\n      }\r\n    }, 80);\r\n\r\n    return () => clearInterval(interval);\r\n  });\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('keyup', handleKeyPress);\r\n\r\n    return () => {\r\n      window.removeEventListener('keyup', handleKeyPress);\r\n    };\r\n  });\r\n\r\n  const getSnakeHeadNewPosition = () => {\r\n    let nextCube = 0;\r\n    switch (snakeDirection) {\r\n      case \"left\":\r\n        nextCube = snakePositions[snakePositions.length - 1] - 1;\r\n        break;\r\n      case \"right\":\r\n        nextCube = snakePositions[snakePositions.length - 1] + 1;\r\n        break;\r\n      case \"down\":\r\n        nextCube = snakePositions[snakePositions.length - 1] + 100;\r\n        break;\r\n      case \"up\":\r\n        nextCube = snakePositions[snakePositions.length - 1] - 100;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return nextCube;\r\n  };\r\n\r\n  /*Run test on specific cube*/\r\n  const isPositionEqualToApplePosition = (cubeToCheck) => {\r\n    return cubeToCheck === applePositions;\r\n  };\r\n\r\n  const isPositionEqualToFrameOfBoard = (cubeToCheck) => {\r\n    let isSnakeHeadTouchFrame = false;\r\n    switch (snakeDirection) {\r\n      case \"left\":\r\n        isSnakeHeadTouchFrame = (cubeToCheck % 100) === 0;\r\n        break;\r\n      case \"right\":\r\n        isSnakeHeadTouchFrame = (cubeToCheck % 100) === (NUMBER_OF_LINES - 1);\r\n        break;\r\n      case \"down\":\r\n        isSnakeHeadTouchFrame = Math.floor(cubeToCheck / 100) === (NUMBER_OF_LINES - 1);\r\n        break;\r\n      case \"up\":\r\n        isSnakeHeadTouchFrame = Math.floor(cubeToCheck / 100) === 0;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return isSnakeHeadTouchFrame;\r\n  };\r\n\r\n  const isPositionEqualToSnakePosition = (cubeToCheck) => {\r\n    return snakePositions.includes(cubeToCheck);\r\n  };\r\n\r\n  /**\r\n   * Apple position is valid if it is not in the same cube as\r\n   * the snake, apple or tree.\r\n   */\r\n  const isApplePositionValid = (applePositionToCheck) => {\r\n    return !(isPositionEqualToSnakePosition(applePositionToCheck) &&\r\n           isPositionEqualToApplePosition(applePositionToCheck))\r\n  };\r\n\r\n  /**\r\n   * Snake position is valid if it is not in the same cube as\r\n   * the snake, apple or tree.\r\n   */\r\n  const isSnakeHeadPositionValid = (snakeHeadPositionToCheck) => {\r\n    return !(isPositionEqualToFrameOfBoard(snakeHeadPositionToCheck) ||\r\n           isPositionEqualToSnakePosition(snakeHeadPositionToCheck))\r\n  };\r\n\r\n  /*Update snake functions*/\r\n  function updateSnakeBodyPosition() {\r\n      let currentSP = [...snakePositions];\r\n      currentSP.shift();\r\n      currentSP.push(getSnakeHeadNewPosition());\r\n      setSnakePositions([...currentSP]);\r\n  }\r\n\r\n  const increaseSnakeBody = () => {\r\n    switch (snakeDirection) {\r\n      case \"right\":\r\n        setSnakePositions([...snakePositions, snakePositions[snakePositions.length - 1] + 1]);\r\n        break;\r\n      case \"left\":\r\n        setSnakePositions([...snakePositions, snakePositions[snakePositions.length - 1] - 1]);\r\n        break;\r\n      case \"up\":\r\n        setSnakePositions([...snakePositions, snakePositions[snakePositions.length - 1] - 100]);\r\n        break;\r\n      case \"down\":\r\n        setSnakePositions([...snakePositions, snakePositions[snakePositions.length - 1] + 100]);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  /**Get in to recursion until the cube the is valid*/\r\n  const updateApplePosition = () => {\r\n    let newRandomCube = getRandomCube();\r\n    if (isApplePositionValid(newRandomCube)) {\r\n      setApplePositions(newRandomCube);\r\n    } else {\r\n      updateApplePosition();\r\n    }\r\n  };\r\n\r\n  //TODO: Fix multiply clicked!\r\n  const handleKeyPress = (e) => {\r\n    console.log(\"I am at handleKeyPress\");\r\n    if (!isGameOver) {\r\n      switch (e.key) {\r\n        case \"ArrowLeft\":\r\n          if (snakeDirection !== \"right\" && snakeDirection !== \"left\") {\r\n            console.log(\"ArrowLeft\");\r\n            setSnakeDirection(\"left\");\r\n          }\r\n          break;\r\n        case \"ArrowRight\":\r\n          if (snakeDirection !== \"left\" && snakeDirection !== \"right\") {\r\n            console.log(\"ArrowRight\");\r\n            setSnakeDirection(\"right\");\r\n          }\r\n          break;\r\n        case \"ArrowDown\":\r\n          if (snakeDirection !== \"up\" && snakeDirection !== \"down\") {\r\n            console.log(\"ArrowDown\");\r\n            setSnakeDirection(\"down\");\r\n          }\r\n          break;\r\n        case \"ArrowUp\":\r\n          if (snakeDirection !== \"down\" && snakeDirection !== \"up\") {\r\n            console.log(\"ArrowUp\");\r\n            setSnakeDirection(\"up\");\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    if (e.key === \"Enter\" && isGameOver && !isEnterClicked) {\r\n      console.log(\"Enter\");\r\n      startNewGame();\r\n      updatedEnterClicked(true);\r\n    }\r\n  };\r\n\r\n  function setCubeClass(snakePositions, i, j) {\r\n    let classToReturn = `cube ${(i * 100) + j}`;\r\n    if ((i * 100 + j) === applePositions) {\r\n      classToReturn += ` apple`\r\n    }\r\n    if (snakePositions.includes(i * 100 + j)) {\r\n      classToReturn += ` middle`\r\n    }\r\n    if (i === 0 || i === NUMBER_OF_LINES || j === 0 || j === NUMBER_OF_LINES) {\r\n      classToReturn += ` frame`\r\n    }\r\n    return classToReturn;\r\n  }\r\n\r\n  let setCubes = () => {\r\n    return [...Array(NUMBER_OF_LINES).keys()].map(i => (i === 0 || i === (NUMBER_OF_LINES - 1)) ?\r\n        <div className={\"frame-top-bottom\"}\r\n             key={i}/> :\r\n        <div className={`row ${i * 100}`} key={i * 100}>\r\n          {[...Array(NUMBER_OF_LINES).keys()].map(j =>\r\n              (j === 0 || j === (NUMBER_OF_LINES - 1)) ?\r\n              <div className={`frame-sides ${(i * 100) + j}`}\r\n                   key={(i * 100) + j}/> :\r\n              <div className={setCubeClass(snakePositions, i, j)}\r\n                   key={(i * 100) + j}/>\r\n          )}\r\n        </div>\r\n    );\r\n  };\r\n\r\n  function getRandomCube() {\r\n    let unitsAndTens = getRndInteger(1, NUMBER_OF_LINES - 2);\r\n    let hundredsAndThousands = getRndInteger(1, NUMBER_OF_LINES - 2) * 100;\r\n    return hundredsAndThousands + unitsAndTens;\r\n  }\r\n\r\n  function getRndInteger(min, max) {\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n  }\r\n\r\n  const gameOver = () => {\r\n    playSadSound();\r\n    setIsGameOver(true);\r\n    updatedEnterClicked(false);\r\n  };\r\n\r\n  const startNewGame = () => {\r\n    setSnakePositions([1015,915,815,715]);\r\n    setSnakeDirection(\"down\");\r\n    setIsGameOver(false);\r\n  };\r\n\r\n  /*Sounds Functions*/\r\n  const playSadSound = () => {\r\n    // const sad = new Audio(\"https://www.fesliyanstudios.com/play-mp3/5645\");\r\n    // sad.play().catch(e => console.error(e));\r\n  };\r\n\r\n  const playBurpSound = () => {\r\n    window.setTimeout(function () {\r\n      const burp = new Audio(\"https://www.fesliyanstudios.com/play-mp3/5759\");\r\n      burp.play().catch(e => console.error(e));\r\n    }, 100);\r\n  };\r\n\r\n  /*Handle buttons Clicks Functions*/\r\n  const handleSoundButtonClicked = () => {\r\n    return isSoundActive ? setSoundActive(false) : setSoundActive(true);\r\n  };\r\n\r\n  const handleStartNewGameButtonClicked = () => {\r\n    startNewGame()\r\n  };\r\n\r\n  /*JSX*/\r\n  return (\r\n    <React.Fragment>\r\n      <button id={\"BTN-disabled-audio\"}\r\n              className={isSoundActive ? \"unMute\" : \"mute\"}\r\n              onClick={handleSoundButtonClicked}/>\r\n      <main>\r\n        {setCubes()}\r\n      </main>\r\n      {isGameOver ?\r\n          <GameOverScreen handleClicked={handleStartNewGameButtonClicked}/> :\r\n          null\r\n      }\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}